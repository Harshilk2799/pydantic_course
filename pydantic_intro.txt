Pydantic
============
1. Define a pydantic model that represents the ideal schema of the data.
 - This include the expected fields, their types, and any validation constraints (e.g., gt=0 for positive numbers.)

2. Instantiate the model with raw input data (usually a dictionary or JSON-like structure).
 - Pydantic will automatically validate the data and coerce it into the correct python types (if possible).
 - If the data doesn't meet the model's requirements, pydantic raises a ValidationError.

3. Pass the validated model object to functions or use it throughout your codebase.
 - Thie ensures that every part of your program works with clean, type-safe, and logically valid data.



Key Features of Pydantic
==========================
1. Data validation = Validates input data using Python type hints
2. Type coercion = Converts input data to the expected type (e.g., "123" â†’ 123)
3. Error reporting = Detailed and user-friendly error messages
4. Nested models = Supports deeply nested JSON-like structures
5. Custom validators = Allows custom logic via @validator decorators
6. Serialization = Easily converts models to/from JSON and dicts
7. Model inheritance = Enables reusability and extension of models
8. Environment config support = In BaseSettings, reads from env vars automatically



What is Field in Pydantic
============================
= In Pydantic, Field is a special helper function used to add metadata, validation constraints, and default values to model fields.

Purpose of Field
===================
= Set default values
= Add validation constraints (e.g., gt, max_length)
= Add metadata like title, description (used in docs like FastAPI)
= Mark a field as required or optional



Common Parameters in Field
==============================
Parameter Purpose
=========== ==============
default / ... ... marks field as required
title Title for the field
description Description for docs
gt / lt Greater than / Less than
ge / le Greater or equal / Less or equal
max_length For strings or lists
min_length Minimum length
example Example value for documentation


What is Annotated?
===================
= Annotated is used to add metadata to a type hint without changing its behavior at runtime.
Syntax: 
 Annotated[type, metadata]
ype(python_json))

